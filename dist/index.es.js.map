{"version":3,"file":"index.es.js","sources":["../node_modules/component-emitter/index.js","../src/socket-client.ts","../src/socket-server.ts"],"sourcesContent":["\r\n/**\r\n * Expose `Emitter`.\r\n */\r\n\r\nif (typeof module !== 'undefined') {\r\n  module.exports = Emitter;\r\n}\r\n\r\n/**\r\n * Initialize a new `Emitter`.\r\n *\r\n * @api public\r\n */\r\n\r\nfunction Emitter(obj) {\r\n  if (obj) return mixin(obj);\r\n};\r\n\r\n/**\r\n * Mixin the emitter properties.\r\n *\r\n * @param {Object} obj\r\n * @return {Object}\r\n * @api private\r\n */\r\n\r\nfunction mixin(obj) {\r\n  for (var key in Emitter.prototype) {\r\n    obj[key] = Emitter.prototype[key];\r\n  }\r\n  return obj;\r\n}\r\n\r\n/**\r\n * Listen on the given `event` with `fn`.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.on =\r\nEmitter.prototype.addEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\r\n    .push(fn);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Adds an `event` listener that will be invoked a single\r\n * time then automatically removed.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.once = function(event, fn){\r\n  function on() {\r\n    this.off(event, on);\r\n    fn.apply(this, arguments);\r\n  }\r\n\r\n  on.fn = fn;\r\n  this.on(event, on);\r\n  return this;\r\n};\r\n\r\n/**\r\n * Remove the given callback for `event` or all\r\n * registered callbacks.\r\n *\r\n * @param {String} event\r\n * @param {Function} fn\r\n * @return {Emitter}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.off =\r\nEmitter.prototype.removeListener =\r\nEmitter.prototype.removeAllListeners =\r\nEmitter.prototype.removeEventListener = function(event, fn){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  // all\r\n  if (0 == arguments.length) {\r\n    this._callbacks = {};\r\n    return this;\r\n  }\r\n\r\n  // specific event\r\n  var callbacks = this._callbacks['$' + event];\r\n  if (!callbacks) return this;\r\n\r\n  // remove all handlers\r\n  if (1 == arguments.length) {\r\n    delete this._callbacks['$' + event];\r\n    return this;\r\n  }\r\n\r\n  // remove specific handler\r\n  var cb;\r\n  for (var i = 0; i < callbacks.length; i++) {\r\n    cb = callbacks[i];\r\n    if (cb === fn || cb.fn === fn) {\r\n      callbacks.splice(i, 1);\r\n      break;\r\n    }\r\n  }\r\n\r\n  // Remove event specific arrays for event types that no\r\n  // one is subscribed for to avoid memory leak.\r\n  if (callbacks.length === 0) {\r\n    delete this._callbacks['$' + event];\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Emit `event` with the given args.\r\n *\r\n * @param {String} event\r\n * @param {Mixed} ...\r\n * @return {Emitter}\r\n */\r\n\r\nEmitter.prototype.emit = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n\r\n  var args = new Array(arguments.length - 1)\r\n    , callbacks = this._callbacks['$' + event];\r\n\r\n  for (var i = 1; i < arguments.length; i++) {\r\n    args[i - 1] = arguments[i];\r\n  }\r\n\r\n  if (callbacks) {\r\n    callbacks = callbacks.slice(0);\r\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\r\n      callbacks[i].apply(this, args);\r\n    }\r\n  }\r\n\r\n  return this;\r\n};\r\n\r\n/**\r\n * Return array of callbacks for `event`.\r\n *\r\n * @param {String} event\r\n * @return {Array}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.listeners = function(event){\r\n  this._callbacks = this._callbacks || {};\r\n  return this._callbacks['$' + event] || [];\r\n};\r\n\r\n/**\r\n * Check if this emitter has `event` handlers.\r\n *\r\n * @param {String} event\r\n * @return {Boolean}\r\n * @api public\r\n */\r\n\r\nEmitter.prototype.hasListeners = function(event){\r\n  return !! this.listeners(event).length;\r\n};\r\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\n\nimport Emitter from 'component-emitter';\nimport type { SocketServerMock } from '.';\n\n/**\n * Mocked Socket.IO client.\n */\nexport class SocketClientMock extends Emitter {\n  /**\n   * Are we currently connected?\n   * @default false\n   */\n  connected: boolean;\n\n  /**\n   * Are we currently disconnected?\n   * @default true\n   */\n  disconnected: boolean;\n\n  /**\n   * Mocked Socket.IO server.\n   */\n  serverMock: SocketServerMock;\n\n  _emitFn: (event: string, ...args: any[]) => Emitter;\n\n  /**\n   * Mocked Socket.IO client.\n   *\n   * @param {SocketServerMock} serverMock\n   */\n  constructor(serverMock: SocketServerMock) {\n    super();\n    this.serverMock = serverMock;\n    this._emitFn = Emitter.prototype.emit;\n\n    this.connected = false;\n    this.disconnected = true;\n  }\n\n  /**\n   * Emit an event to the server.\n   *\n   * If the last argument is a function, then it will be called\n   * as an 'ack' when the response is received. The parameter(s) of the\n   * ack will be whatever data is returned from the event\n   *\n   * @param {string}   event - The event that we're emitting\n   * @param {any[]}   args  - Optional arguments to send with the event\n   * @returns {Emitter<string>}\n   */\n  emit = (event: string, ...args: any[]): Emitter<string> => {\n    let ack;\n    if (typeof args[args.length - 1] === 'function') {\n      ack = args.pop();\n    }\n\n    return this.serverMock.emitEvent(event, args, ack);\n  };\n\n  /**\n   * Fire an event to the server.\n   *\n   * If the last argument is a function, then it will be called\n   * as an 'ack' when the response is received. The parameter(s) of the\n   * ack will be whatever data is returned from the event\n   *\n   * @param {string} event - The event that we're emitting\n   * @param {any[]} args - Optional arguments to send with the event\n   */\n  fireEvent = (event: string, ...args: any[]) => {\n    return this._emitFn(event, ...args);\n  };\n\n  /**\n   * Close the socket.\n   */\n  close = () => {\n    this.disconnected = true;\n    this.connected = false;\n    this.emit('disconnect', 'io client disconnect');\n    this._emitFn('disconnect', 'io client disconnect');\n    return this;\n  };\n\n  /**\n   * Disconnect the socket manually.\n   */\n  disconnect = () => {\n    return this.close();\n  };\n}\n\nexport default SocketClientMock;\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\n\nimport Emitter from 'component-emitter';\nimport { SocketClientMock } from './socket-client';\n\nconst createArgs = (args: any): any => {\n  return args ? JSON.parse(JSON.stringify(args)) : undefined;\n};\n\n/**\n * Mocked Socket.IO server.\n */\nexport class SocketServerMock extends Emitter {\n  /**\n   * Mocked Socket.IO client.\n   */\n  clientMock: SocketClientMock;\n\n  handshake: {\n    [key: string]: any;\n  };\n\n  /**\n   * List of rooms.\n   */\n  rooms: string[];\n\n  _emitFn: (event: string, ...args: any[]) => Emitter;\n\n  generalCallbacks: {\n    [key: string]: Function;\n  };\n\n  /**\n   * Broadcast to a room.\n   *\n   * @return {Function} Broadcast options.\n   */\n  broadcast: {\n    /**\n     * Broadcast to a room.\n     *\n     * @param {string} room The room to broadcast to.\n     * @return {Function} Functions to perform on the room.\n     **/\n    to: (room: string) => {\n      /**\n       * Emit to the room.\n       *\n       * @param {string} event\n       * @param {any[]} args\n       **/\n      emit: (event: string, ...args: any[]) => void;\n    };\n  };\n\n  /**\n   * Creates a new SocketMock instance.\n   **/\n  constructor(handshake?: { [key: string]: any }) {\n    super();\n\n    this.handshake = handshake ?? {};\n    this.clientMock = new SocketClientMock(this);\n    this.rooms = [];\n\n    this._emitFn = Emitter.prototype.emit;\n    this.generalCallbacks = {};\n    this.broadcast = {\n      to: (room: string) => {\n        return {\n          emit: (event: string, ...args: any[]) => {\n            if (this.generalCallbacks[event]) {\n              this.generalCallbacks[event](...args.map(createArgs), room);\n            }\n          },\n        };\n      },\n    };\n\n    this.clientMock.connected = true;\n    this.clientMock.disconnected = false;\n    this.emit('connect');\n  }\n\n  /**\n   * Emit an event to the server (used by client).\n   *\n   * @param {string} event - The event.\n   * @param {any[]} args - Additional args.\n   * @param {Emitter} ack - The ack argument is optional. When the server calls it, args reply will be delivered to client\n   **/\n  emitEvent = (event: string, args: any[], ack?: Function): Emitter => {\n    return this._emitFn(event, ...args.map(createArgs), ack);\n  };\n\n  /**\n   * Register on every event that the server sends.\n   * @param {string} event\n   * @param {Function} callback\n   **/\n  onEmit = (event: string, callback: Function) => {\n    this.generalCallbacks[event] = callback;\n  };\n\n  /**\n   * Emit an event to the client.\n   *\n   * @param {string} event - The event.\n   * @param {any[]} args - Additional args.\n   **/\n  emit = (event: string, ...args: any[]) => {\n    return this.clientMock.fireEvent(event, ...args);\n  };\n\n  /**\n   * Join a room.\n   *\n   * @param {string} room The room we want to join.\n   **/\n  join = (room: string) => {\n    this.rooms.push(room);\n  };\n\n  /**\n   * Leave a room.\n   *\n   * @param {string} room The room you want to leave.\n   **/\n  leave = (room: string) => {\n    const index = this.rooms.indexOf(room);\n    this.rooms.splice(index, 1);\n  };\n\n  /**\n   * Monitor logging feature.\n   *\n   * @param {string} value The value you want to monitor.\n   **/\n  monitor = (value: string): string => {\n    return value;\n  };\n\n  /**\n   * Close the socket server.\n   *\n   * @returns {SocketServerMock} The mocked Socket.IO server.\n   */\n  disconnect = (): SocketServerMock => {\n    this.emit('disconnecting', 'io server disconnect');\n    this.emit('disconnect', 'io server disconnect');\n    this._emitFn('disconnecting', 'io server disconnect');\n    this._emitFn('disconnect', 'io server disconnect');\n    return this;\n  };\n\n  /**\n   * Broadcast to a room.\n   *\n   * @param {string} room The room to broadcast to.\n   * @return {Record<string, Function>} Functions to perform on the room.\n   **/\n  to = (room: string): Record<string, Function> => {\n    return {\n      /**\n       * Emit an event to the room.\n       *\n       * @param {string} event\n       * @param {any[]} args\n       **/\n      emit: (event: string, ...args: any[]) => {\n        if (this.generalCallbacks[event]) {\n          this.generalCallbacks[event](...args.map(createArgs), room);\n        }\n      },\n    };\n  };\n}\n\nexport default SocketServerMock;\n"],"names":[],"mappings":"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"}